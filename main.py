#============IMPORT LIBLARIEYS
from telebot import TeleBot, types
from telebot.types import Update
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
import uuid
from flask import Flask, request
#============IMPORT FROM FILES
from config import bot_token, admin
from keyboards import *
from db import init_db, add_1_count_url, add_user, get_count_url, get_count_money, get_all, update_money_plus, update_money_minus, get_count_all_money,update_all_money_plus
import parser_t
from parser_t import id_out
# open Chrome
try:
    options = Options()
    options.add_argument('--headless')
    options.add_argument('--disable-gpu')
    dr = webdriver.Chrome(options=options)
except:
    options = webdriver.FirefoxOptions()
    options.add_argument('--headless')
    dr = webdriver.Firefox(options = options)

# main bot
b = TeleBot(bot_token)

# db
init_db()

links_out = []

##########===WITHDRAW LIST===######################
temp_with_id = []
temp_wit = {'id':'','name':'','rekv':'','sum':'','urls_rented':''}
class Withdraw:
    list = []

#############===WAITING LIST===####################
list_id = []
temp = {'id':'','name':'','exp':'','from':'','time':''}
class Waiting:
    list = []
def add_to_waiting(id,username,experience,from_,time):
    Waiting.list.append({'id': id,
                        'name': username,
                        'exp': experience,
                        'from': from_,
                        'time': time
                         })
#####################################################

###########==CONDITION OF RENTING==##################
class Rules:
    domen = ['staemcammunily.ru']
    min_videos = 15
    min_watches = 4
    min_total_watch = 1500
    sum = 40
    name = 'Misha'
    all = 100188628
#####################################################

def run_bot():
    try:
        b.remove_webhook()
        print("bot started")
        b.polling(none_stop=True, interval=10)

    except Exception as err:
        print("run bot error:", err)


@b.message_handler(content_types=['text'])
def get_text_msg(message):
    print(50*'*')
    print(message.from_user.id)
    print('Message: '+ message.text)
    print(50 * '*')
    if (message.text.__contains__("start")) and (message.chat.type == 'private') and (message.from_user.id not in admin) and message.from_user.id not in list_id:
        if get_all(message.from_user.id):
            b.send_message(message.from_user.id, '–í—ã —É–∂–µ –∑–∞–ø—É—Å–∫–∞–ª–∏ –±–æ—Ç–∞, –Ω–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ ;)', reply_markup=main_user())
        else:
            #add_to_waiting(1256629898, 'name', 'exp', 'from', 'time')
            m = b.send_message(message.chat.id, 'üòé–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É. –ë—ã–ª –ª–∏ –æ–ø—ã—Ç –≤ —Å–ø–∞–º–µ –¢–¢?')
            b.register_next_step_handler(m, get_exp)

    if (message.text == "–ó–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è"):
        for i in Waiting.list:
            b.send_message(message.chat.id, f'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {i["id"]} '+'\n'+f'–ù–∏–∫: {i["name"]} '+'\n'+f'–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {i["exp"]} '+'\n'+f'–ö—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª: {i["from"]} '+'\n'+f'–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≥–æ—Ç–æ–≤ —É–¥–µ–ª—è—Ç—å: {i["time"]}', reply_markup=act_apply(i["id"]))
    if message.text == "–ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥":
        for i in Withdraw.list:
            b.send_message(message.chat.id, f'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {i["id"]} ' + '\n' + f'–ù–∏–∫: {i["name"]} ' + '\n' + f'–†–µ–∫–≤–∏–∑–∏—Ç—ã: {i["rekv"]}' + '\n' + f'–°—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {i["sum"]}' + '\n' + f'–í—Å–µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ —Å—Å—ã–ª–æ–∫: {i["urls_rented"]}', reply_markup=act_withdraw(i["id"]))
    if message.text == Rules.name:
        add_user(message.from_user.id)
        admin.append(message.from_user.id)
    if message.text == "–°–º–µ–Ω–∏—Ç—å —É—Å–ª–æ–≤–∏—è":
        b.send_message(message.from_user.id, '–°–µ–π—á–∞—Å:'+'\n'+f'–î–æ–º–µ–Ω—ã: {" ".join(Rules.domen)}'+'\n'+f'–ú–∏–Ω. –∫-–≤–æ –≤–∏–¥–µ–æ: {Rules.min_videos}'+'\n'+ f'–ú–∏–Ω. –∫-–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º –Ω–∞ –≤–∏–¥–µ–æ: {Rules.min_watches}'+'\n'+f'–ó–∞–≥–∞–ª—å–Ω–æ–µ –∫-–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {Rules.min_total_watch}'+'\n'+f'–í—ã–ø–ª–∞—Ç–∞ –∑–∞ 1 –∞–∫–∫: {Rules.sum}'+'\n'+'–ß—Ç–æ –∏–º–µ–Ω–Ω–æ —Å–º–µ–Ω–Ω–∏—Ç—å?', reply_markup=condition())
    if '/admin'== message.text and message.from_user.id in admin:
        b.send_message(message.chat.id,'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –ë–æ—Å—Å! –ß—Ç–æ –¥–µ–ª–∞–µ–º?',reply_markup=main_admin())
    if '–î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É' in message.text:
        m = b.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –¢–¢ –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:')
        b.register_next_step_handler(m, add_url)
    if '–ü—Ä–æ—Ñ–∏–ª—å' in message.text:
        if message.from_user.username:
            b.send_message(message.chat.id, f'‚öô –õ–æ–≥–∏–Ω Telegram: {message.from_user.username}'+'\n'+
                                            f'üÜî Telegram ID: {message.from_user.id}'+'\n'+
                                            f'üíµ –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: {Rules.sum} —Ä—É–± –∑–∞ –∞–∫–∫–∞—É–Ω—Ç'+'\n'+
                                            f'üß® –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å—Å—ã–ª–æ–∫: {get_count_url(message.from_user.id)[0]}'+'\n'+
                                            f'üí∞ –°—É–º–º–∞ –≤—ã–ø–ª–∞—Ç –ø—Ä–æ–µ–∫—Ç–∞: {Rules.all} —Ä—É–±.'+'\n'+
                                            f'üí∏ –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏: {get_count_all_money(message.from_user.id)[0]}' + '\n' +
                                            f'ü§ë –î–æ—Å—Ç—É–ø–Ω–æ –∫ –≤—ã–≤–æ–¥—É: {get_count_money(message.from_user.id)[0]} —Ä—É–±.' + '\n', reply_markup=main_user())
        else:
            b.send_message(message.chat.id, f'‚öô –õ–æ–≥–∏–Ω Telegram: {message.from_user.first_name}' + '\n' +
                                            f'üÜî Telegram ID: {message.from_user.id}' + '\n' +
                                            f'üíµ –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: {Rules.sum} —Ä—É–± –∑–∞ –∞–∫–∫–∞—É–Ω—Ç' + '\n' +
                                            f'üß® –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å—Å—ã–ª–æ–∫: {get_count_url(message.from_user.id)[0]}' + '\n' +
                                            f'üí∞ –°—É–º–º–∞ –≤—ã–ø–ª–∞—Ç –ø—Ä–æ–µ–∫—Ç–∞: {Rules.all} —Ä—É–±.'+'\n'+
                                            f'üí∏ –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏: {get_count_all_money(message.from_user.id)[0]}' + '\n' +
                                            f'ü§ë –î–æ—Å—Ç—É–ø–Ω–æ –∫ –≤—ã–≤–æ–¥—É: {get_count_money(message.from_user.id)[0]} —Ä—É–±.' + '\n', reply_markup=main_user())
        print(get_all(message.chat.id))
    if '–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤' in message.text:
        b.send_message(message.chat.id, f'–í–∞—à –±–∞–ª–∞–Ω—Å: {get_count_money(message.from_user.id)[0]}', reply_markup=wallet())
    if message.text == '+m' and message.from_user.id in admin:
        update_money_plus(message.from_user.id, int(Rules.sum))
    if message.text == '+s' and message.from_user.id in admin:
        add_1_count_url(message.from_user.id)
    if '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–∫–∏' in message.text:
        m = b.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –¢–¢ –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:')
        b.register_next_step_handler(m, get_test)
    if '–ü–æ–º–æ—â—å' in message.text:
        b.send_message(message.chat.id, "–°—Ç–∞—Ç—å–∏:" + '\n' + '\n'+"<a href='https://lolz.guru/threads/2050246/'>üìë–¢–µ–º–∞ –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤</a>"+'\n'+'\n'+f"""<a href='https://telegra.ph/Pravila-raboty-01-03'>üõ†–ü—Ä–∞–≤–∏–ª–∞ —Ä–∞–±–æ—Ç—ã</a>"""+'\n'+'\n'+f"""<a href='https://t.me/spamtiktokcash'>üí≥–ö–∞–Ω–∞–ª –≤—ã–ø–ª–∞—Ç</a>"""+'\n'+'\n'+f"""<a href='https://telegra.ph/Vsem-privet-segodnya-ya-rasskazhu-kak-spamit-v-Tiktok-12-06'>‚ùó–ú–∞–Ω—É–∞–ª</a>""", parse_mode="HTML", reply_markup=main_user())


def get_test(message):
    b.send_message(message.chat.id, '‚öô–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–∫–∏..‚öô')
    res = parser_t.parser_test(message.text, Rules.domen, int(Rules.min_videos), int(Rules.min_watches), int(Rules.min_total_watch))
    b.send_message(message.chat.id, res, reply_markup=main_user())

@b.callback_query_handler(func=lambda call: True)
def get_call(call):
    print(call.data)
    if 'rem' in call.data:
        id = call.data.split('_')
        id = id[-1]
        for i in Waiting.list:
            if i["id"] == int(id):
                Waiting.list.remove(i)
                b.delete_message(call.from_user.id, call.message.message_id)

    elif 'add' in call.data:
        id = call.data.split('_')
        id = id[-1]
        add_user(int(id))
        b.send_message(int(id), '–í–∞—à—É –∑–∞—è–≤–∫—É —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–ª–∏, –≤—ã –ø—Ä–∏–Ω—è—Ç—ã. –°—Å—ã–ª–∫–∞ –Ω–∞ –±–µ—Å–µ–¥—É - https://t.me/joinchat/FM00KjlXvfY256B-', reply_markup=main_user())
        list_id.remove(int(id))
        add_user(int(id))
        for i in Waiting.list:
            if i["id"] == int(id):
                Waiting.list.remove(i)
                b.delete_message(call.from_user.id, call.message.message_id)

    elif 'payed' in call.data:
        id = call.data.split('_')
        id = id[-1]
        for i in Withdraw.list:
            if i["id"] == int(id):
                Withdraw.list.remove(i)
                b.delete_message(call.from_user.id, call.message.message_id)
                Rules.all += int(i["sum"])
        b.send_message(int(id), 'üéâ–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –∫–æ—à–µ–ª–µ–∫üéâ',
                       reply_markup=main_user())
    elif 'back' == call.data:
        b.delete_message(call.from_user.id, call.message.message_id)
        b.send_message(call.message.chat.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=main_admin())

    elif 'back_u' == call.data:
        b.delete_message(call.from_user.id, call.message.message_id)
        b.send_message(call.message.chat.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=main_user())

    elif call.data == 'withdraw':
        if int(get_count_money(call.message.chat.id)[0]) == 0:
            b.send_message(call.message.chat.id, '–í—ã–≤–æ–¥ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω, —Ç–∞–∫ –∫–∞–∫ —É –≤–∞—Å –Ω–∞ —Å—á–µ—Ç—É 0 —Ä—É–±', reply_markup=main_user())
        elif call.message.chat.id in temp_with_id:
            b.send_message(call.message.chat.id,'–í—ã–≤–æ–¥ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –≤—ã —É–∂–µ –ø–æ–¥–∞–≤–∞–ª–∏ –∑–∞—è–≤–∫—É')
        else:
            m = b.send_message(call.message.chat.id, 'üíµ–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞::',reply_markup=back())
            b.register_next_step_handler(m, withdraw_sum)

    elif call.data == 'edit_domen':
        m = b.send_message(call.message.chat.id, '–£–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—ã–π –¥–æ–º–µ–Ω:', reply_markup=back())
        b.register_next_step_handler(m, edit_domen)

    elif call.data == 'edit_videos':
        m = b.send_message(call.message.chat.id, '–£–≤–µ–¥–∏—Ç–µ –º–∏–Ω. –∫-–≤–æ –≤–∏–¥–µ–æ:', reply_markup=back())
        b.register_next_step_handler(m, edit_videos)

    elif call.data == 'edit_watches':
        m = b.send_message(call.message.chat.id, '–£–≤–µ–¥–∏—Ç–µ –º–∏–Ω. –∫-–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –Ω–∞ –≤–∏–¥–µ–æ:', reply_markup=back())
        b.register_next_step_handler(m, edit_watches)

    elif call.data == 'edit_total_watches':
        m = b.send_message(call.message.chat.id, '–£–≤–µ–¥–∏—Ç–µ –≤—Å–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –Ω–∞ –∞–∫–∞—É–Ω—Ç–µ:', reply_markup=back())
        b.register_next_step_handler(m, edit_total_watches)

    elif call.data == 'edit_sum':
        m = b.send_message(call.message.chat.id, '–£–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–ø–ª–∞—Ç:', reply_markup=back())
        b.register_next_step_handler(m, edit_sum)

def edit_sum(message):
    if message.text == '–ù–∞–∑–∞–¥':
        b.send_message(message.from_user.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=main_admin())
        return 'back'
    Rules.sum = int(message.text)
    b.send_message(message.from_user.id, '–£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ', reply_markup=main_admin())

def edit_total_watches(message):
    if message.text == '–ù–∞–∑–∞–¥':
        b.send_message(message.from_user.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=main_admin())
        return 'back'
    Rules.min_total_watch = int(message.text)
    b.send_message(message.from_user.id, '–£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ', reply_markup=main_admin())

def edit_watches(message):
    if message.text == '–ù–∞–∑–∞–¥':
        b.send_message(message.from_user.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=main_admin())
        return 'back'
    Rules.min_watches = int(message.text)
    b.send_message(message.from_user.id, '–£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ', reply_markup=main_admin())

def edit_videos(message):
    if message.text == '–ù–∞–∑–∞–¥':
        b.send_message(message.from_user.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=main_admin())
        return 'back'
    Rules.min_videos = int(message.text)
    b.send_message(message.from_user.id, '–£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ', reply_markup=main_admin())

def edit_domen(message):
    if message.text == '–ù–∞–∑–∞–¥':
        b.send_message(message.from_user.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=main_admin())
        return 'back'
    Rules.domen.append(message.text)
    b.send_message(message.from_user.id, '–£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ', reply_markup=main_admin())

def get_exp(message):
    temp['id'] = message.from_user.id
    temp['name']= message.from_user.first_name
    temp['exp'] = message.text
    m = b.send_message(message.chat.id,
                       '–£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å lolzteamü§ì')
    b.register_next_step_handler(m, get_from)
def get_from(message):
    temp['from'] = message.text
    m = b.send_message(message.chat.id,
                       'üíª–°–∫–æ–ª—å–∫–æ –≥–æ—Ç–æ–≤—ã —É–¥–µ–ª—è—Ç—å –≤—Ä–µ–º–µ–Ω–∏?')
    b.register_next_step_handler(m, get_time)
def get_time(message):
    temp['time'] = message.text
    b.send_message(message.chat.id,
                   'üéâ–ó–∞—è–≤–∫–∞ –ø–æ–¥–∞–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ, –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç –∑–∞—è–≤–∫—É.üéâ')
    list_id.append(message.from_user.id)
    add_to_waiting(temp['id'],temp['name'],temp['exp'],temp['from'],temp['time'])
    print('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–º–Ω–∞—Ç—É –æ–∂–∏–¥–∞–Ω–∏–µ: '+str(temp['id']),temp['name'],temp['exp'],temp['from'],temp['time'])


def add_url(message):
    b.send_message(message.chat.id, '‚öô–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–∫–∏..‚öô')
    if message.text in links_out:
        b.send_message(message.chat.id, '‚õî–ê–∫–∞—É–Ω—Ç —É–∂–µ –±—ã–ª –∑–¥–∞–Ω‚õî', reply_markup=main_user())
        return 'pass'
    res = parser_t.parser(message.text, Rules.domen, int(Rules.min_videos), int(Rules.min_watches), int(Rules.min_total_watch))
    if res == '‚úÖ–°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞‚úÖ':
        b.send_message(message.chat.id, res, reply_markup=main_user())
        add_1_count_url(message.from_user.id)
        update_money_plus(message.from_user.id, int(Rules.sum))
        update_all_money_plus(message.from_user.id, int(Rules.sum))
    else:
        b.send_message(message.chat.id, '‚õî–°—Å—ã–ª–∫–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç. –î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏‚õî', reply_markup=main_user())

def withdraw_sum(message):
    if message.text == '–ù–∞–∑–∞–¥':
        b.send_message(message.from_user.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=main_user())
        return 'back'
    if int(message.text) > int(get_count_money(message.from_user.id)[0]):
        b.send_message(message.from_user.id, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –∫–æ—à–µ–ª—å–∫–µ', reply_markup=main_user())
        return 'Denied'
    m = b.send_message(message.from_user.id,'üí≥–ù–∞–ø–∏—à–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã(Qiwi –∏–ª–∏ –Ø–Ω–¥–µ–∫—Å. –î–µ–Ω—å–≥–∏)', reply_markup=back())
    b.register_next_step_handler(m, withdraw_rekv)
    temp_wit["id"] = message.from_user.id
    if message.from_user.username:
        temp_wit["name"] = message.from_user.username
    else:
        temp_wit["name"] = message.from_user.first_name
    temp_wit["sum"] = message.text
    temp_wit['urls_rented'] = get_count_url(message.from_user.id)[0]

def withdraw_rekv(message):
    if message.text == '–ù–∞–∑–∞–¥':
        b.send_message(message.from_user.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=main_user())
        return 'back'
    b.send_message(message.from_user.id, 'üéâ–ó–∞—è–≤–∫–∞ –ø–æ–¥–∞–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ, –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç –∑–∞—è–≤–∫—É.üéâ', reply_markup=main_user())
    temp_wit["rekv"] = message.text
    temp_with_id.append(message.from_user.id)
    Withdraw.list.append(temp_wit)
    update_money_minus(message.from_user.id, int(temp_wit["sum"]))

